// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Dev-cmyser/calc_ipoteka/internal/entity"
	mock "github.com/stretchr/testify/mock"

	mortgage "github.com/Dev-cmyser/calc_ipoteka/internal/entity/mortgage"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// Cache provides a mock function with given fields: _a0
func (_m *UseCase) Cache(_a0 context.Context) ([]entity.CachedMortgage, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Cache")
	}

	var r0 []entity.CachedMortgage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.CachedMortgage, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.CachedMortgage); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CachedMortgage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *UseCase) Execute(_a0 context.Context, _a1 mortgage.Request) (entity.Mortgage, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 entity.Mortgage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mortgage.Request) (entity.Mortgage, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mortgage.Request) entity.Mortgage); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Mortgage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mortgage.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
